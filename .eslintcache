[{"Z:\\electroneWorkSpace\\electron-app\\src\\index.js":"1","Z:\\electroneWorkSpace\\electron-app\\src\\reportWebVitals.js":"2","Z:\\electroneWorkSpace\\electron-app\\src\\App.js":"3","Z:\\electroneWorkSpace\\electron-app\\src\\layouts\\Dashboard.jsx":"4","Z:\\electroneWorkSpace\\electron-app\\src\\views\\Map.jsx":"5","Z:\\electroneWorkSpace\\electron-app\\src\\services\\authentication.service.js":"6","Z:\\electroneWorkSpace\\electron-app\\src\\variables\\config.js":"7","Z:\\electroneWorkSpace\\electron-app\\src\\components\\MapTodo.jsx":"8","Z:\\electroneWorkSpace\\electron-app\\src\\services\\useChat.js":"9","Z:\\electroneWorkSpace\\electron-app\\src\\serviceWorker.js":"10","Z:\\electroneWorkSpace\\electron-app\\src\\Chat\\Chat.js":"11","Z:\\electroneWorkSpace\\electron-app\\src\\Chat\\ChatRoom.jsx":"12","Z:\\electroneWorkSpace\\electron-app\\src\\hooks\\useSalaChat.js":"13","Z:\\electroneWorkSpace\\electron-app\\src\\store\\index.js":"14","Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\index.js":"15","Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\salaChat.js":"16","Z:\\electroneWorkSpace\\electron-app\\src\\PruebasMapeo\\PruebasMapeo.jsx":"17","Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\contador.js":"18","Z:\\electroneWorkSpace\\electron-app\\src\\hooks\\useContador.js":"19","Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\Contador.js":"20"},{"size":763,"mtime":1611081068730,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1610607803132,"results":"23","hashOfConfig":"22"},{"size":723,"mtime":1611212753090,"results":"24","hashOfConfig":"22"},{"size":4157,"mtime":1611081261489,"results":"25","hashOfConfig":"22"},{"size":479,"mtime":1610607803134,"results":"26","hashOfConfig":"22"},{"size":2032,"mtime":1610607803133,"results":"27","hashOfConfig":"22"},{"size":79,"mtime":1610607803134,"results":"28","hashOfConfig":"22"},{"size":8438,"mtime":1611047742944,"results":"29","hashOfConfig":"22"},{"size":1107,"mtime":1612012698178,"results":"30","hashOfConfig":"22"},{"size":5328,"mtime":1610966227425,"results":"31","hashOfConfig":"22"},{"size":321,"mtime":1611047829455,"results":"32","hashOfConfig":"22"},{"size":3597,"mtime":1612012382509,"results":"33","hashOfConfig":"22"},{"size":392,"mtime":1611079346132,"results":"34","hashOfConfig":"22"},{"size":211,"mtime":1611660327956,"results":"35","hashOfConfig":"22"},{"size":96,"mtime":1611737447443,"results":"36","hashOfConfig":"22"},{"size":377,"mtime":1612011701119,"results":"37","hashOfConfig":"22"},{"size":1316,"mtime":1611216521238,"results":"38","hashOfConfig":"22"},{"size":376,"mtime":1611737428596,"results":"39","hashOfConfig":"22"},{"size":392,"mtime":1611660473353,"results":"40","hashOfConfig":"22"},{"size":376,"mtime":1611737428596,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1vhf9pl",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"Z:\\electroneWorkSpace\\electron-app\\src\\index.js",["89"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n",["90","91"],"Z:\\electroneWorkSpace\\electron-app\\src\\reportWebVitals.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\App.js",["92","93","94"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport Dashboard from './layouts/Dashboard.jsx';\r\nimport store from '../src/store';\r\nimport {Provider} from 'react-redux';\r\nimport PruebasMapeo from './PruebasMapeo/PruebasMapeo.jsx'\r\n\r\nimport ChatRoom from \"./Chat/ChatRoom.jsx\";\r\n\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\n\r\nconst App = () => (\r\n  <Provider store={store}> \r\n  <div className=\"App\">\r\n    <BrowserRouter>\r\n      <Switch>\r\n        {/* PARA HACER PRUEBAS CAMBIAR EL ORDEN */}\r\n        <Route path=\"/\" component={ChatRoom} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </div>\r\n  </Provider>\r\n\r\n\r\n);\r\n\r\nexport default App;\r\n","Z:\\electroneWorkSpace\\electron-app\\src\\layouts\\Dashboard.jsx",["95"],"import React, { Component } from 'react';\r\n\r\nimport Map from '../views/Map.jsx';\r\n//import logoCmobile from './../../assets/img/c_mobile.png';\r\nimport logo from '../assets/img/logo.png';\r\nimport menuIcon from '../assets/img/Menuicon.png';\r\nimport { Location } from '@reach/router'\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nimport { Layout, Menu, Button, Drawer } from 'antd';\r\n\r\nimport { authenticationService } from '../services/authentication.service.js';\r\n\r\n\r\n\r\nconst { Header, Content } = Layout;\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logged: true,\r\n            visible: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ logged: authenticationService.loginValid() })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if (!this.state.logged) {\r\n            return <Redirect to='/login' />\r\n        }\r\n    }\r\n\r\n    exit = () => {\r\n        authenticationService.logout();\r\n        this.setState({ logged: authenticationService.loginValid() })\r\n    }\r\n\r\n\r\n    //funciones para el drawer\r\n    showDrawer = () => {\r\n        this.setState({\r\n          visible: true,\r\n        });\r\n      };\r\n    \r\n      onClose = () => {\r\n        this.setState({\r\n          visible: false,\r\n        });\r\n      };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n          \r\n            <Layout className=\"layout\" style={{ minHeight: '100vh', background: '#fff' }}>\r\n                {this.renderRedirect()}\r\n                <Header style={{ background: '#33A8FF', padding: 0 }} >\r\n\r\n                    {/* MENU DRAWER (desplegable) */}\r\n                <div>    \r\n                    <Drawer\r\n                    title=\"Opciones\"\r\n                    placement=\"left\"\r\n                    closable={false}\r\n                    onClose={this.onClose}\r\n                    visible={this.state.visible}\r\n                    >\r\n                    <Button style={{padding:'0px'}} type=\"primary\" block>\r\n                        <Link to=\"/\">Lista de rutas</Link>       \r\n                    </Button>\r\n                    <br></br>\r\n                    <Button style={{marginTop:'10px'}}  type=\"primary\" block>\r\n                    \r\n                        <Link to=\"/login\">Perfiles de usuario</Link>                    \r\n                    </Button>\r\n                    <Button style={{marginTop:'10px'}} type=\"primary\" block>\r\n                    Preguntas de las rutas\r\n                    </Button>\r\n                    <Button style={{marginTop:'10px'}} type=\"danger\" block>\r\n                    Logout\r\n                    </Button>\r\n                    </Drawer>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                    <Button onClick={this.showDrawer} style={{width:'50px', position: 'fixed', marginLeft:'-49%', marginTop: '18px'}} block><img src={menuIcon} style={{ height: \"50%\", width: \"100%\"}} /></Button>\r\n\r\n                    <div className=\"logo\" >\r\n                        <img src={logo} alt=\"Logo\" style={{ height: \"2%\", width: \"2%\", marginLeft: \"10px\" }} />\r\n                    </div>\r\n\r\n                    <div className=\"logout\" style={{ alignItems: \"center\", marginRight: \"10px\" }}>\r\n                        <Button type=\"danger\" ghost icon=\"poweroff\" size=\"small\" onClick={this.exit}>Log out</Button>\r\n                    </div>\r\n                    <Location>\r\n                        {props => {\r\n                            return (\r\n                                <Menu selectedKeys={[props.location.pathname]} theme=\"default\" mode=\"horizontal\" style={{ lineHeight: '64px' }}>\r\n                                </Menu>\r\n                            );\r\n                        }}\r\n                    </Location>\r\n\r\n                </Header>\r\n                <Content>\r\n                    <div style={{ background: '#666666', minHeight: \"calc(100vh - 71px)\" }}>\r\n                        <Map />\r\n                    </div>\r\n                </Content>\r\n                {/*<Footer style={{ textAlign: 'center' }}>C-Mobile ©2019 Created by CEIT</Footer>*/}\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Dashboard;","Z:\\electroneWorkSpace\\electron-app\\src\\views\\Map.jsx",[],"Z:\\electroneWorkSpace\\electron-app\\src\\services\\authentication.service.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\variables\\config.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\components\\MapTodo.jsx",["96","97","98","99","100","101"],"import React from \"react\";\r\n//To request HTTP\r\nimport axios from \"axios\";\r\n\r\n//Leaflet\r\nimport { Map, TileLayer, ZoomControl, Polyline, Marker } from 'react-leaflet'\r\n//Import Leaflet and plugins\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-contextmenu'\r\nimport 'leaflet-contextmenu/dist/leaflet.contextmenu.min.css'\r\n//Geolocalizacion\r\nimport Geolocation from 'react-geolocation'\r\n//Icons to context menu\r\nimport ZoomIn from 'leaflet-contextmenu/examples/images/zoom-in.png'\r\nimport ZoomOut from 'leaflet-contextmenu/examples/images/zoom-out.png'\r\n\r\nimport PointInPolygon from 'point-in-polygon';\r\n\r\n//Antd \r\nimport { Col, Select, Button, Radio, Drawer } from 'antd';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n//Variables globales\r\nimport { globals } from \"../variables/config.js\";\r\n\r\n\r\n//Componentes\r\nimport Chat from \"../Chat/Chat\"\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst RadioGroup = Radio.Group;\r\n\r\n//Tiles for map\r\nconst map_tiles = [\r\n    {\r\n        label: \"Open Street Maps\",\r\n        value: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Satelite\",\r\n        value: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\r\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\r\n    },\r\n    {\r\n        label: \"Open Street Maps DE\",\r\n        value: \"https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Open Street Maps HOT\",\r\n        value: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Open Topo Map\",\r\n        value: \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Open Map Surfer\",\r\n        value: \"https://maps.heigit.org/openmapsurfer/tiles/roads/webmercator/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Hydda Full\",\r\n        value: \"https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png\"\r\n    },\r\n    {\r\n        label: \"Esri World Street Map\",\r\n        value: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n    },\r\n    {\r\n        label: \"Esri World Topo Map\",\r\n        value: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}\"\r\n    }\r\n]\r\n\r\n//Function to select Tile\r\nconst getLabelOfTile = (value) => map_tiles.find(obj => obj.value === value).label || \"Open Street Maps\";\r\n\r\nclass MapTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //VARIABLES DEL STATE\r\n\r\n            latLonClick: null, //lat, lng on map click\r\n\r\n            //Map tile selected\r\n            tile_map: localStorage.getItem(\"tile_map\") || \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\r\n\r\n            //Start position and zoom\r\n            //position: [43.290863, -1.983663],\r\n            position: [43.34659, -1.78743],\r\n            zoom: 15,\r\n\r\n            //Panel right on add Denm or IVI with traces\r\n            currentEventDenm: null,\r\n            currentEventIvi: null,\r\n\r\n            //traces action when click on map\r\n            clickMapStatus: null, // null | detection | relevation | traces (for denm)\r\n\r\n            //Denm trace first point\r\n            newTraceDenmStart: null,\r\n\r\n            //Cursor for add traces\r\n            customCur: \"\",\r\n\r\n            //Menu Desplazable\r\n            visible: false , \r\n            placement: 'left' \r\n\r\n\r\n        };\r\n    }\r\n    //FUNCIONES APARTIR DE AQUI\r\n\r\n    componentDidMount() {\r\n        //Get token to request\r\n        let objUser = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        let token = (objUser && objUser.token) ? objUser.token : \"\";\r\n\r\n        //Get all events\r\n        axios.get(globals.url_api + 'data', {\r\n            headers: { 'x-access-token': token }\r\n        })\r\n            .then(res => (res.status === 200) && this.setState({ poi: res.data.poi, denm: res.data.denm, ivi: res.data.ivi }));\r\n    }\r\n\r\n    //Change Tile map in moment and save in local storage\r\n    handleChangeTile = value => {\r\n        this.setState({ tile_map: value });\r\n        localStorage.setItem(\"tile_map\", value);\r\n    };\r\n    //More zoom\r\n    zoomIn = () => {\r\n        let lastZoom = this.state.zoom;\r\n        if (lastZoom < 21) this.setState({ zoom: lastZoom + 1 })\r\n    }\r\n\r\n    //Less zoom\r\n    zoomOut = () => {\r\n        let lastZoom = this.state.zoom;\r\n        if (lastZoom > 1) this.setState({ zoom: lastZoom - 1 })\r\n    }\r\n\r\n\r\n\r\n    //FUNCIONES MENU DESPLEGABLE\r\n    showDrawer = () => {\r\n        this.setState({\r\n          visible: true,\r\n        });\r\n      };\r\n    \r\n    onClose = () => {\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    onChange = e => {\r\n        this.setState({\r\n            placement: e.target.value,\r\n        });\r\n    };\r\n\r\n\r\n    //RENDER PARA LO VISUAL\r\n    render() {\r\n        const { tile_map, position, zoom } = this.state;\r\n        return (\r\n            <Col span={24} style={{ padding: 0 }}>\r\n                \r\n                {/*Map object*/}\r\n                <Map\r\n                    center={position}\r\n                    zoom={zoom}\r\n                    style={{  height: 'calc(101vh - 70px)' }}\r\n                    onClick={this.handleNewZone}\r\n                    zoomControl={false}\r\n                    contextmenu={true}\r\n                    contextmenuWidth={450}\r\n                    maxZoom={20}\r\n                    //Menu on right click\r\n                    contextmenuItems={[\r\n                        \r\n                        {\r\n                            text: 'Prueba',\r\n                            icon: ZoomControl,\r\n                            \r\n                        },'-', {\r\n                            text: 'Zoom in',\r\n                            icon: ZoomIn,\r\n                            callback: this.zoomIn\r\n                        }, {\r\n                            text: 'Zoom out',\r\n                            icon: ZoomOut,\r\n                            callback: this.zoomOut\r\n                        }\r\n                    ]}\r\n                    //className={customCur}\r\n                    ref={map => this.map = map}\r\n                >\r\n\r\n                    <ZoomControl position=\"topright\" />\r\n                    <TileLayer\r\n                        url={tile_map}\r\n                        attribution={map_tiles[1].value === tile_map ? map_tiles[1].attribution : \"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"}\r\n                    />\r\n\r\n                    {/*To select map tiles*/}\r\n                    <Control position=\"bottomleft\" style={{position: 'fixed', marginLeft:'49%'}}>\r\n                        <Select size=\"small\" defaultValue={getLabelOfTile(tile_map)} onChange={this.handleChangeTile}>\r\n                            {map_tiles.map((obj, i) => <Option key={\"map_tile_\" + i} value={obj.value}>{obj.label}</Option>)}\r\n                        </Select>\r\n                    </Control>\r\n                    {/*To select map tiles*/}\r\n                    <Control position=\"topleft\">\r\n                        <Geolocation\r\n                            render={({\r\n                                position: { coords: { latitude, longitude } = {} } = {},\r\n                                //error,\r\n                                getCurrentPosition\r\n                            }) => {\r\n                                if (latitude && longitude && position[0] !== latitude && position[1] !== longitude) this.setState({ position: [latitude, longitude] })\r\n                                //this.map.setView(new L.LatLng(40.737, -73.923), 8);\r\n                                return <Button shape=\"circle\" ghost onClick={() => getCurrentPosition()} ><FontAwesomeIcon icon={faMapMarkerAlt} /></Button>\r\n                            }\r\n                            }\r\n                        />\r\n                    </Control>\r\n\r\n                    <Control>\r\n                        <Chat>\r\n                        </Chat>\r\n                    </Control>\r\n\r\n\r\n                    </Map>\r\n            </Col>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MapTodo;","Z:\\electroneWorkSpace\\electron-app\\src\\services\\useChat.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\serviceWorker.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\Chat\\Chat.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\Chat\\ChatRoom.jsx",["102","103","104","105","106"],"import useChat from \"../services/useChat\";\r\nimport React, { useState } from 'react';\r\nimport \"./ChatRoom.css\"\r\nimport axios from 'axios';\r\n\r\nimport useSalaChat from '../hooks/useSalaChat';\r\nimport useContador from '../hooks/useContador';\r\n\r\n\r\nconst ChatRoom = () => {\r\n  const {salaChat,setSalaChat} = useSalaChat();\r\n  const {Contador,setContador} = useContador(0);\r\n  const [roomName, setRoomName] = React.useState();\r\n\r\n  const handleRoomNameChange = (event) => {\r\n    setRoomName(event.target.value);\r\n    \r\n  };\r\n  const { messages, sendMessage } = useChat(salaChat);\r\n  const [newMessage, setNewMessage] = React.useState(\"\");\r\n  const [show, setShow] = useState(true);\r\n  const handleNewMessageChange = (event) => {\r\n  \r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n\r\n  const handleSendMessage = () => {\r\n    sendMessage(newMessage);\r\n    //HACE BIEN\r\n    console.log(newMessage);\r\n    setNewMessage(\"\");\r\n    \r\n  };\r\n\r\n\r\n    const [responseData, setResponseData] = React.useState();\r\n    const fetchData = React.useCallback(() => {\r\n        axios({\r\n            \"method\": \"GET\",\r\n            \"url\": \"http://137.116.219.96/rutas/buscarRutas/all\",\r\n            //\"url\": \"http://localhost:8080/rutas/buscarRutas/all\",\r\n        })\r\n            .then((response) => {\r\n                setResponseData(response.data)\r\n                setSalaChat(response.data[0].nombre)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }, [])\r\n    React.useEffect(() => {\r\n        fetchData()\r\n    }, [fetchData,messages])\r\n\r\n    const cambiarDatos = () =>{\r\n     \r\n     \r\n    if(Contador >= responseData.length){\r\n      setSalaChat(responseData[0].nombre)\r\n      setContador(Contador - responseData.length);      \r\n    }\r\n    else{\r\n    setContador(Contador +1)\r\n    setSalaChat(responseData[Contador].nombre)\r\n    }\r\n\r\n    \r\n  }\r\n \r\n  return (\r\n    <div>\r\n        <button\r\n        type=\"button\" className=\"button-chat\"\r\n        onClick={() => {\r\n          setShow(!show);\r\n        }}\r\n      >\r\n        {show ? 'Mostrar Chat' : 'Ocultar Chat'}\r\n      </button>\r\n      {show ? (\r\n          <div className=\"chat-room-container\">\r\n          <h1 className=\"room-name\">Room: {salaChat}</h1>\r\n          <div className=\"messages-container\">\r\n            <ol className=\"messages-list\">\r\n              {messages.map((message, i) => {\r\n                \r\n                 if(message.roomId === salaChat){\r\n                  {console.log(message.roomId)}\r\n                  {console.log(message.body)}\r\n                  <li\r\n                  key={i}\r\n                  className={`message-item ${\r\n                    message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\r\n                  }`}\r\n                >\r\n                  {message.body}\r\n                </li>\r\n                 }\r\n                \r\n\r\n              })}\r\n               \r\n            </ol>\r\n          </div>\r\n           <textarea\r\n             value={newMessage}\r\n             onChange={handleNewMessageChange}\r\n             placeholder=\"Write message...\"\r\n             className=\"new-message-input-field\"\r\n           />\r\n           <button onClick={handleSendMessage} className=\"send-message-button\">\r\n             Send\r\n           </button>\r\n           <button onClick={()=>{ cambiarDatos()}} onChange={handleRoomNameChange}   className=\"send-message-button\">\r\n             Cambiar Sala\r\n           </button>\r\n\r\n          \r\n         </div>\r\n      ) : (\r\n        <div style={{ color: 'blue' }}></div>\r\n      )}\r\n\r\n \r\n\r\n    </div>\r\n   \r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n\r\n","Z:\\electroneWorkSpace\\electron-app\\src\\hooks\\useSalaChat.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\store\\index.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\index.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\salaChat.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\PruebasMapeo\\PruebasMapeo.jsx",["107"],"import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PruebasMapeo = (props) => {\r\n    let [responseData, setResponseData] = React.useState();\r\n    const fetchData = React.useCallback(() => {\r\n        axios({\r\n            \"method\": \"GET\",\r\n            \"url\": \"http://137.116.219.96/localizaciones/all\",\r\n            // \"url\": \"http://localhost:8080/localizaciones/all\",\r\n        })\r\n            .then((response) => {\r\n                setResponseData(response.data)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }, [])\r\n    React.useEffect(() => {\r\n        fetchData()\r\n    }, [fetchData])\r\n\r\n\r\n    const getJsonIndented = (response) => JSON.stringify(response, null, 4);\r\n\r\n    const JSONDisplayer = ({children}) => (\r\n        <div>\r\n            <pre>{getJsonIndented(children)}</pre>\r\n\r\n            \r\n        </div>\r\n    );\r\n\r\n\r\n\r\n    //<JSONDisplayer>{responseData}</JSONDisplayer>\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Fetching Data with React Hooks\r\n          </h1>\r\n\r\n          <p>{responseData.map((responseData) => {\r\n                return(\r\n                    <p>{responseData}</p>\r\n                )\r\n\r\n\r\n            })}</p>\r\n            \r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default PruebasMapeo;\r\n\r\n","Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\contador.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\hooks\\useContador.js",[],"Z:\\electroneWorkSpace\\electron-app\\src\\store\\reducers\\Contador.js",[],{"ruleId":"108","severity":1,"message":"109","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":23},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"108","severity":1,"message":"116","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":12},{"ruleId":"108","severity":1,"message":"117","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":17},{"ruleId":"108","severity":1,"message":"118","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":20},{"ruleId":"119","severity":1,"message":"120","line":95,"column":141,"nodeType":"121","endLine":95,"endColumn":203},{"ruleId":"108","severity":1,"message":"122","line":6,"column":39,"nodeType":"110","messageId":"111","endLine":6,"endColumn":47},{"ruleId":"108","severity":1,"message":"123","line":6,"column":49,"nodeType":"110","messageId":"111","endLine":6,"endColumn":55},{"ruleId":"108","severity":1,"message":"124","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":9},{"ruleId":"108","severity":1,"message":"125","line":19,"column":8,"nodeType":"110","messageId":"111","endLine":19,"endColumn":22},{"ruleId":"108","severity":1,"message":"126","line":22,"column":38,"nodeType":"110","messageId":"111","endLine":22,"endColumn":44},{"ruleId":"108","severity":1,"message":"127","line":37,"column":7,"nodeType":"110","messageId":"111","endLine":37,"endColumn":17},{"ruleId":"108","severity":1,"message":"128","line":13,"column":10,"nodeType":"110","messageId":"111","endLine":13,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":51,"column":8,"nodeType":"131","endLine":51,"endColumn":10,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":86,"column":42,"nodeType":"135","messageId":"136","endLine":86,"endColumn":44},{"ruleId":"137","severity":1,"message":"138","line":89,"column":19,"nodeType":"139","messageId":"140","endLine":89,"endColumn":48},{"ruleId":"137","severity":1,"message":"138","line":90,"column":19,"nodeType":"139","messageId":"140","endLine":90,"endColumn":46},{"ruleId":"108","severity":1,"message":"141","line":26,"column":11,"nodeType":"110","messageId":"111","endLine":26,"endColumn":24},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"'logo' is defined but never used.","'Dashboard' is defined but never used.","'PruebasMapeo' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Polyline' is defined but never used.","'Marker' is defined but never used.","'L' is defined but never used.","'PointInPolygon' is defined but never used.","'Drawer' is defined but never used.","'RadioGroup' is assigned a value but never used.","'roomName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'setSalaChat'. Either include it or remove the dependency array.","ArrayExpression",["144"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'JSONDisplayer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [setSalaChat]",{"range":"147","text":"148"},[1483,1485],"[setSalaChat]"]